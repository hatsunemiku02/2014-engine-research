

SET(GRA_INCLUDE_DIR  ${PROJECT_SOURCE_DIR}/CATFISH/GlesSyetem)
SET(RES_INCLUDE_DIR  ${PROJECT_SOURCE_DIR}/CATFISH/ResourcePhraser)
SET(IO_INCLUDE_DIR  ${PROJECT_SOURCE_DIR}/CATFISH/IO)
SET(FI_INCLUDE_DIR  ${PROJECT_SOURCE_DIR}/FreeImage/Source)

IF(WINDOWS_BUILD)
SET(ALL_LIB_DIR ${PROJECT_SOURCE_DIR}/Bin/Win)
ELSEIF(ANDOIRD_BUILD)

ENDIF(WINDOWS_BUILD)

MESSAGE( STATUS "GRA_INCLUDE_DIR:" ${GRA_INCLUDE_DIR} )	
MESSAGE( STATUS "IO_INCLUDE_DIR:" ${IO_INCLUDE_DIR} )	
MESSAGE( STATUS "FI_INCLUDE_DIR:" ${FI_INCLUDE_DIR} )	
MESSAGE ( STATUS "res_INCLUDE_DIR:" ${RES_INCLUDE_DIR})
MESSAGE( STATUS "ALL_LIB_DIR:" ${ALL_LIB_DIR} )

INCLUDE_DIRECTORIES(
	${GRA_INCLUDE_DIR} 
	${IO_INCLUDE_DIR}
	${FI_INCLUDE_DIR}
	${RES_INCLUDE_DIR}
	${PROJECT_SOURCE_DIR}/CATFISH/ScriptSystem
	${PROJECT_SOURCE_DIR}/GLESEmulator/Include
)
LINK_DIRECTORIES( ${ALL_LIB_DIR} )


# folder
SET ( _HEADER_FILES 

)

# folder
SET ( _SOURCE_FILES

	main.cpp
)
#<-------- Additional Include Directories ------------------>
INCLUDE_DIRECTORIES(
	
)

ADD_EXECUTABLE( 
	Demo
	WIN32
	#head
	${_HEADER_FILES}
	#source
	${_SOURCE_FILES}

)
TARGET_LINK_LIBRARIES(
#target
	Demo
	
	GlesSystem.lib
	IO
	ResourcePhraser.lib
	ScriptSystem.lib
)
ADD_DEPENDENCIES(
	Demo
	GlesSystem
	ResourcePhraser
	ScriptSystem
)
ADD_DEFINITIONS(

)
SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /ENTRY:mainCRTStartup" CACHE STRING "" FORCE )


#Organize projects into folders
SET_PROPERTY(TARGET Demo PROPERTY FOLDER "4.EXE")


